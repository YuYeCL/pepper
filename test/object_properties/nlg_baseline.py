"""
Generates NLG baseline results and saves them to the database.
"""

import os
import sqlite3


def get_most_frequent_color(c, type_dir, instance_dir):
    instance_dict = dict()
    obj_type = os.path.split(type_dir)[-1]
    for observation in os.listdir(os.path.join(type_dir, instance_dir)):
        c.execute('SELECT color FROM object_info WHERE id = (?)', (str(observation)[:-4],))
        color = c.fetchone()[0]
        if color not in instance_dict:
            instance_dict[color] = 1
        else:
            instance_dict[color] += 1
    most_frequent_color = max(instance_dict, key=instance_dict.get)
    description = most_frequent_color + ' ' + obj_type

    return description


def save_nlg_baseline_results():
    root = './results'
    conn = sqlite3.connect('eval_instances.db')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS nlg_baseline (instance TEXT, color TEXT);')
    instance_dict = dict()
    for directory in os.listdir(root):
        dir_path = os.path.join(root, directory)
        if os.path.isdir(dir_path):
            for instance_dir in [inst for inst in os.listdir(dir_path)
                                 if os.path.isdir(os.path.join(dir_path, inst)) and not inst.endswith('-1')]:
                instance_description = get_most_frequent_color(cur, dir_path, instance_dir)
                instance_dict[instance_dir] = instance_description

    print('Instance descriptions generated by NLG baseline:')
    for key, value in instance_dict.items():
        print('{}: {}'.format(key, value))
        cur.execute('INSERT INTO nlg_baseline VALUES (?, ?);', (str(key), str(value)))
    conn.commit()
    print('Results saved to database.')
    conn.close()


if __name__ == '__main__':
    save_nlg_baseline_results()
