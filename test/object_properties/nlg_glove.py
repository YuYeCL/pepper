"""
Generates NLG GloVe results and and saves them to the database.
"""

from gensim.models import KeyedVectors
from collections import defaultdict, OrderedDict

import numpy as np

import os
import sqlite3


def map_instances_to_observations(c, root):
    string_dict = defaultdict(list)
    for type_dir in (type_dir for type_dir in os.listdir(root) if os.path.isdir(os.path.join(root, type_dir))):
        type_path = os.path.join(root, type_dir)
        for instance_dir in (instance_dir for instance_dir in os.listdir(type_path)
                             if os.path.isdir(os.path.join(type_path, instance_dir)) and not instance_dir.endswith('-1')):
            for observation in os.listdir(os.path.join(type_path, instance_dir)):
                c.execute('SELECT color FROM object_info WHERE id = (?)', (str(observation)[:-4],))
                color = c.fetchone()[0]
                description = color + ' ' + type_dir
                string_dict[instance_dir].append(description)

    return string_dict


def tag_tokens(color_names, color_keywords, brightness_keywords, separator=' '):

    all_tags = []

    for color_name in color_names:
        tag_dict = OrderedDict()
        tokens = color_name.split(separator)[:-1]
        for token in tokens:
            tag_dict[token] = check_property(token, color_keywords, brightness_keywords)

        all_tags.append(tag_dict)

    return all_tags


def check_property(token, color_keywords, brightness_keywords):

    if any(color_keyword in token for color_keyword in color_keywords):
        tag = 'color'
    elif any(brightness_keyword in token for brightness_keyword in brightness_keywords):
        tag = 'brightness'
    else:
        tag = 'general'

    return tag


def get_keyword_vecs(token_list, keywords, model, vocab):

    vecs = []
    for token in token_list:
        if token in vocab:
            vec = model[token]
            vecs.append(vec)
        else:
            for keyword in keywords:
                if keyword in token:
                    vec = model[keyword]
                    vecs.append(vec)

    return vecs


def save_nlg_glove_results():

    root = './results'

    color_keywords = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive',
                      'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'grey', 'brown', 'orange', 'pink',
                      'turquoise', 'lavender', 'magenta']

    brightness_keywords = ['light', 'dark', 'medium', 'lightish', 'darkish', 'lighter', 'darker']

    emb_file = 'glove_to_w2v.6B.100d.txt'
    emb_path = os.path.join('embeddings', emb_file)

    vec_model = KeyedVectors.load(emb_path, mmap='r')
    vocabulary = vec_model.wv.vocab.keys()

    conn = sqlite3.connect('eval_instances.db')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS nlg_glove_100 (instance TEXT, color TEXT);')

    instance_dict = map_instances_to_observations(cur, root)

    print('Instance descriptions generated by NLG with rule-based GloVe (100 dim):')

    for instance, observations in instance_dict.items():
        tags = tag_tokens(observations, color_keywords, brightness_keywords)
        all_color = [key for tagged in tags for key, value in tagged.items() if value == 'color']
        if all_color:
            color_vecs = get_keyword_vecs(all_color, color_keywords, vec_model, vocabulary)
            mean_color = np.mean(color_vecs, axis=0, dtype='float32')
            top_color = vec_model.most_similar(positive=[mean_color], topn=1)
            color_string = top_color[0][0]
        else:
            color_string = ''

        all_brightness = [key for tagged in tags for key, value in tagged.items() if value == 'brightness']
        if all_brightness:
            mean_brightness = np.mean([vec_model[bright] for bright in all_brightness if bright in vocabulary], axis=0, dtype='float32')
            top_brightness = vec_model.most_similar(positive=[mean_brightness], topn=1)
            brightness_string = top_brightness[0][0] + ' '
        else:
            brightness_string = ''

        all_general = [key for tagged in tags for key, value in tagged.items() if value == 'general']
        if all_general:
            mean_general = np.mean([vec_model[gen] for gen in all_general if gen in vocabulary],
                                   axis=0, dtype='float32')
            top_general = vec_model.most_similar(positive=[mean_general], topn=1)
            general_string = top_general[0][0] + ' '
        else:
            general_string = ''

        alt_color = brightness_string + general_string + color_string

        obj_type = ' '.join(instance.split('_')[:-1])
        if color_string == '':
            alt_string = alt_color + obj_type
        else:
            alt_string = alt_color + ' ' + obj_type

        print('{}: {}'.format(instance, alt_string))
        cur.execute('INSERT INTO nlg_glove_100 VALUES (?, ?);', (str(instance), str(alt_string)))

    conn.commit()
    print('\nResults saved to database.')
    conn.close()


if __name__ == '__main__':
    save_nlg_glove_results()